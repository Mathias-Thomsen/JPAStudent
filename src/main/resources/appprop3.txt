# This is an application properties that is using spring to get connection to mysql database.
#
#
# Database Configuration:
#
# spring.datasource.url=${JDBCUrl}: This line specifies the database URL that your Spring Boot application will use. Instead of hardcoding the URL, it's using a placeholder ${JDBCUrl}. This means that the actual database URL will be provided through a property named JDBCUrl (likely from an external configuration source like environment variables or property files).
# spring.datasource.username=${JDBCUsername}: Similar to the database URL, this line specifies the username for the database connection. It expects the actual username to be provided through the JDBCUsername property.
# spring.datasource.password=${JDBCPassword}: This line specifies the password for the database connection. It expects the actual password to be provided through the JDBCPassword property.


spring.datasource.url=${JDBCUrl}
spring.datasource.username=${JDBCUsername}
spring.datasource.password=${JDBCPassword}



# JPA Configuration:

# spring.jpa.hibernate.ddl-auto=create-drop: This line configures the behavior of Hibernate, the JPA (Java Persistence API) implementation used by Spring Boot, with regard to database schema creation. In this case, it's set to create-drop, which means that Hibernate will create the database schema when the application starts and drop it when the application shuts down. This is typically used for development and testing environments.
# spring.jpa.show-sql=true: This line instructs Spring Boot to log SQL statements that are executed by Hibernate. Setting it to true enables SQL logging, which can be useful for debugging and understanding the database interactions of your application.

spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true